package com.leetcode.tag.dfs.two;

import java.util.Arrays;

/**
 * 924. 尽量减少恶意软件的传播
 * <p>
 * 十分钟.十分钟.十分钟
 */
public class MinMalwareSpread {
    /**
     * 方法一： 深度优先搜索
     * <p>
     * 连通分量
     * <p>
     * 首先，把图中所有的连通分量各自标上不同的颜色，这可以用深度优先搜索来实现。
     * <p>
     * 算法包括以下几个部分：
     * <p>
     * 给连通分量上色： 遍历每个节点，如果它还没有颜色，就用深度优先搜索去遍历它所在的连通分量，同时给这个连通分量标上新的颜色。
     * <p>
     * 计算每个连通分量的大小： 数一下每个颜色的节点各有多少个。
     * <p>
     * 找到唯一的颜色： 找到 initial 中颜色唯一的节点。
     * <p>
     * 选择答案： 对于 initial 中颜色唯一的节点，计算这个颜色节点的个数。从中选出最大节点个数的那个，如果有多个最优解，选择其中节点下标最小的。
     * <p>
     * 如果没有颜色唯一的节点，直接返回 min(initial)。
     * <p>
     * 作者：LeetCode
     * 链接：https://leetcode-cn.com/problems/minimize-malware-spread/solution/jin-liang-jian-shao-e-yi-ruan-jian-de-chuan-bo-b-2/
     * 来源：力扣（LeetCode）
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     */
    class Solution {
        public int minMalwareSpread(int[][] graph, int[] initial) {
            // 1. Color each component.
            // colors[node] = the color of this node.

            int length = graph.length;
            int[] colors = new int[length];
            Arrays.fill(colors, -1);
            int n = 0;

            for (int node = 0; node < length; ++node) {
                if (colors[node] == -1) {
                    dfs(graph, colors, node, n++);
                }
            }

            // 2. Size of each color.
            int[] size = new int[n];
            for (int color : colors) {
                size[color]++;
            }

            // 3. Find unique colors.
            int[] colorCount = new int[n];
            for (int node : initial) {
                colorCount[colors[node]]++;
            }

            // 4. Answer
            int ans = Integer.MAX_VALUE;
            for (int node : initial) {
                int c = colors[node];
                if (colorCount[c] == 1) {
                    if (ans == Integer.MAX_VALUE) {
                        ans = node;
                    } else if (size[c] > size[colors[ans]]) {
                        ans = node;
                    } else if (size[c] == size[colors[ans]] && node < ans) {
                        ans = node;
                    }
                }
            }

            if (ans == Integer.MAX_VALUE) {
                for (int node : initial) {
                    ans = Math.min(ans, node);
                }
            }

            return ans;
        }

        public void dfs(int[][] graph, int[] colors, int node, int color) {
            colors[node] = color;
            for (int nei = 0; nei < graph.length; ++nei) {
                if (graph[node][nei] == 1 && colors[nei] == -1) {
                    dfs(graph, colors, nei, color);
                }
            }
        }
    }

    /**
     * 方法二： 并查集
     * <p>
     * 同 方法一 一样，也得找出图中所有的连通分量，不同的是这一步用并查集来做。
     * <p>
     * 作者：LeetCode
     * 链接：https://leetcode-cn.com/problems/minimize-malware-spread/solution/jin-liang-jian-shao-e-yi-ruan-jian-de-chuan-bo-b-2/
     * 来源：力扣（LeetCode）
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     */
    class Solution1 {
        public int minMalwareSpread(int[][] graph, int[] initial) {
            int N = graph.length;
            DSU dsu = new DSU(N);
            for (int i = 0; i < N; ++i) {
                for (int j = i + 1; j < N; ++j) {
                    if (graph[i][j] == 1) {
                        dsu.union(i, j);
                    }
                }
            }

            int[] count = new int[N];
            for (int node : initial) {
                count[dsu.find(node)]++;
            }

            int ans = -1, ansSize = -1;
            for (int node : initial) {
                int root = dsu.find(node);
                if (count[root] == 1) {  // unique color
                    int rootSize = dsu.size(root);
                    if (rootSize > ansSize) {
                        ansSize = rootSize;
                        ans = node;
                    } else if (rootSize == ansSize && node < ans) {
                        ansSize = rootSize;
                        ans = node;
                    }
                }
            }

            if (ans == -1) {
                ans = Integer.MAX_VALUE;
                for (int node : initial) {
                    ans = Math.min(ans, node);
                }
            }
            return ans;
        }
    }


    class DSU {
        //还有连通分量个数

        //下标表示顶点
        int[] parent;
        //每个root的大小
        int[] size;

        DSU(int N) {
            parent = new int[N];
            for (int x = 0; x < N; ++x) {
                parent[x] = x;
            }

            size = new int[N];
            Arrays.fill(size, 1);
        }

        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }

        public void union(int x, int y) {
            int xRoot = find(x);
            int yRoot = find(y);
            parent[xRoot] = yRoot;
            size[yRoot] += size[xRoot];
        }

        public int size(int x) {
            return size[find(x)];
        }
    }

}
