package com.leetcode.tag.dfs.two;

import java.util.Arrays;

/**
 * 924. 尽量减少恶意软件的传播
 * <p>
 * 十分钟.十分钟.十分钟
 */
public class MinMalwareSpread {
    /**
     * 方法一： 深度优先搜索
     * <p>
     * 作者：LeetCode
     * 链接：https://leetcode-cn.com/problems/minimize-malware-spread/solution/jin-liang-jian-shao-e-yi-ruan-jian-de-chuan-bo-b-2/
     * 来源：力扣（LeetCode）
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     */
    class Solution {
        public int minMalwareSpread(int[][] graph, int[] initial) {
            // 1. Color each component.
            // colors[node] = the color of this node.

            int length = graph.length;
            int[] colors = new int[length];
            Arrays.fill(colors, -1);
            int n = 0;

            for (int node = 0; node < length; ++node) {
                if (colors[node] == -1) {
                    dfs(graph, colors, node, n++);
                }
            }

            // 2. Size of each color.
            int[] size = new int[n];
            for (int color : colors) {
                size[color]++;
            }

            // 3. Find unique colors.
            int[] colorCount = new int[n];
            for (int node : initial) {
                colorCount[colors[node]]++;
            }

            // 4. Answer
            int ans = Integer.MAX_VALUE;
            for (int node : initial) {
                int c = colors[node];
                if (colorCount[c] == 1) {
                    if (ans == Integer.MAX_VALUE) {
                        ans = node;
                    } else if (size[c] > size[colors[ans]]) {
                        ans = node;
                    } else if (size[c] == size[colors[ans]] && node < ans) {
                        ans = node;
                    }
                }
            }

            if (ans == Integer.MAX_VALUE) {
                for (int node : initial) {
                    ans = Math.min(ans, node);
                }
            }

            return ans;
        }

        public void dfs(int[][] graph, int[] colors, int node, int color) {
            colors[node] = color;
            for (int nei = 0; nei < graph.length; ++nei) {
                if (graph[node][nei] == 1 && colors[nei] == -1) {
                    dfs(graph, colors, nei, color);
                }
            }
        }
    }

}
