package com.algorithm.study.datastructure.tree.redblack.one;

/**
 * 前人在2-3树的理论基础上发明了红黑树
 * <p>
 * 红黑树是一种平衡二叉树，只有一种节点。这种节点有两个儿子，和2-3树中的2-节点对应。
 * 如何表示3-节点呢？我们尝试一种特殊的边：默认情况下节点的颜色均为黑色。
 * 我们将某个节点染为红色，表示它和父亲的的链接是红色的，当我们将红链接画平时，我们发现它和2-3树中的3-节点极为类似！
 * <p>
 * 红黑树画平太厉害了。将某个节点染为红色，表示它和父亲的的链接是红色的。
 * <p>
 * 红黑树。
 * <p>
 * 旋转操作看作将边顺时针或者逆时针旋转。
 */
public class RedBlack {
    /**
     * 2-3树:合并2,3分裂。
     * <p>
     * 为了探究红黑树的插入操作，我们依然回到2-3树。在2-3树中，我们将新插入的节点与上面的节点合并，
     * 然后再做调整。为了表示合并，我们将新插入的节点均设为红色，表示与上面的节点相连接。
     * <p>
     * 然而插入后，新的红节点可能会违反我们的规定，因此需要在回溯的时候进行调整。
     */
    public void insert() {

    }
}
